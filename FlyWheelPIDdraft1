#include "robot-config.h"
          
/*
 *PID Chassis Code (Draft #1)
 *@author Jon Poret (Base by Karthik Selveraj)
 *November 14, 2018
 *Changes-
 * This is the First draft of the flywheel PID
*/
//PID FWD & REV Chassis Movement
void PIDChassis(double speed){
    Flywheel0.resetRotation(); //////////////////////////
    Flywheel1.resetRotation(); //////////////////////////

    double goal = 0.0; //idk what goal has to be
    
    double pGain = 0.0;
    double iGain = 0.0;
    double dGain = 0.0;
    
    double errorAvg = (FlywheelTop.rotation(vex::rotationUnits::deg) + FlywheelBottom.rotation(vex::rotationUnits::deg))/2
    double error = errorAvg;
    double errorSum = 0.0;
    double oldError = FlywheelTop.rotation(vex::rotationUnits::deg);
    /*
    bool isFirst = true;
    int counter = 0;
    
    int i = 0;
    Timer.clear();
    double oldSpeed = 0.0;
    */
    while(error > 20.0){
        error = goal - FlywheelToprotation(vex::rotationUnits::deg);
        errorSum += (error);
        if(error == 0.0){
            errorSum = 0.0;
        }
       //something something screen thing
        double change = error - oldError;
        //double motorSpeed = (error*pGain) + ((1.0/errorSum)*(iGain)) + (change*dGain);
        //if(motorSpeed <= 30.0){
          //  motorSpeed = 30.0;
        }
        FlywheelTop.spin(vex::directionType::fwd, motorSpeed, vex::velocityUnits::rpm);
        FlywheelBottom.spin(vex::directionType::fwd, motorSpeed,vex::velocityUnits::rpm);
        
        oldError = error;
        /*
        if(oldSpeed >= 0.0 && motorSpeed < 0.0 && isFirst == true){
            isFirst = false;
            oldSpeed = motorSpeed;
            Brain.resetTimer();
            continue;
        }
        else if(oldSpeed < 0.0 && motorSpeed > 0.0 && isFirst == false){
            counter++;
        }
        else if(oldSpeed > 0.0 && motorSpeed < 0.0 && isFirst == false){
            counter++;
        }
        else{
            oldSpeed = motorSpeed;
            continue;
        }

        if(counter % 2 == 0 && counter > 1){
            double currentTime = (Brain.timer(vex::timeUnits::sec));
            int add = (i-1)*10;      
            Brain.Screen.printAt(1,30 + add, true, "%f", currentTime); 
            Brain.resetTimer();
        }
        oldSpeed = motorSpeed;
        i++;
        */
        vex::task::sleep(30);
    }
    
    FlywheelTop.stop(vex::brakeType::brake);
    FlywheelBottom.stop(vex::brakeType::brake);
    
    FlywheelTop.resetRotation(); //the motor encoder values are set to zero
    FlywheelBottom.resetRotation();
}

int main() {

}
