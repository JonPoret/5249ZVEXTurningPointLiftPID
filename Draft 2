#include "robot-config.h"
/*
 *PID Lift Code (Draft #1)
 *@author Jon Poret (Base by Karthik Selveraj)
 *November 15, 2018
 *Changes-
 * This code is a modified version of Karthik's Chassis PID code that is being used for the lift.
*/
//PID FWD & REV Chassis Movement
void PIDLift(double dist)
{
    RightLift.resetRotation(); //sets the encoder values of the motors to zero.
    LeftLift.resetRotation();

    double goal = (720*dist)/(0.7*M_PI);
    
    double pGain = 0.0;
    double iGain = 0.0;
    double dGain = 0.0;
    
    double error = RightLift;
    double oldError = RightLift.rotation(vex::rotationUnits::deg) = 0.0;
    
    bool isFirst = true;
    int counter = 0;
    
    int i = 0;
    Timer.clear();
    double oldSpeed = 0.0;
    
    while(error > 20.0){
        error = goal - RightLift.rotation(vex::rotationUnits::deg);
        errorSum += (error);
        if(error == 0.0){
            errorSum = 0.0;
        }
       
        double change = error - oldError;
        
        double difference = RightChassis.rotation(vex::rotationUnits::deg) - LeftChassis.rotation(vex::rotationUnits::deg); 
        double motorSpeed = (error*pGain) + ((1.0/errorSum)*(iGain)) + (change*dGain);
        if(motorSpeed <= 30.0){
            motorSpeed = 30.0;
        }
        RightLift.spin(vex::directionType::fwd, motorSpeed, vex::velocityUnits::rpm);
        LeftLift.spin(vex::directionType::fwd, motorSpeed,vex::velocityUnits::rpm);
        
        oldError = error;
        
        if(oldSpeed >= 0.0 && motorSpeed < 0.0 && isFirst == true)
        {
            isFirst = false;
            oldSpeed = motorSpeed;
            Brain.resetTimer(); 
            continue;
        }
        else if(oldSpeed < 0.0 && motorSpeed > 0.0 && isFirst == false){
            counter++;
        }
        else if(oldSpeed > 0.0 && motorSpeed < 0.0 && isFirst == false){
            counter++;
        }
        else{
            oldSpeed = motorSpeed;
            continue;
        }

        if(counter % 2 == 0 && counter > 1)
        {
            double currentTime = (Brain.timer(vex::timeUnits::sec));
            int add = (i-1)*10;      
            Brain.Screen.printAt(1,30 + add, true, "%f", currentTime); //prints the amount of time the bot moved for while oscilating if it oscilates. It prints the time between intervals when it reaches the target, regardless of whether or not it stays there.
            Brain.resetTimer();
        }
        oldSpeed = motorSpeed;
        i++;
        
        vex::task::sleep(30);
    }
    
    LeftLift.stop(vex::brakeType::brake); //this stops the bot once it has reached its target.
    RightLift.stop(vex::brakeType::brake);
    
    RightLift.resetRotation(); //encoder values are set to zero.
    LeftLift.resetRotation();
}
