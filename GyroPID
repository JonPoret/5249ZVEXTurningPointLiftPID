#include "robot-config.h"
          

void GyroTurnRight(double deg){
    deg *= 10.0;
    
    double gyroVal = (Gyroscope.value(vex::analogUnits::range12bit));
    double org = gyroVal;
    double current = gyroVal - org;

    double goal = deg + org;
    
    double pGain = 0.0;
    double iGain = 0.0;
    double dGain = 0.0;
    
    double error = goal - current;
    double errorSum = 0.0;
    double oldError = 0.0;
    
    double correction = 0.0;
    
    bool isFirst = true;
    int counter = 0;
    
    int i = 0;
    Brain.resetTimer();
    double oldSpeed = 0.0;
    
    
    while(true){
        gyroVal = (Gyroscope.value(vex::analogUnits::range12bit));
        current = gyroVal - org;
        error = goal - current;
        errorSum += (error);
        if(error == 0.0){
            errorSum = 0.0;
        }
       
        double change = error - oldError;
        
        double motorSpeed = (error*pGain) + ((1.0/errorSum)*(iGain)) + (change*dGain);
        
        if(LeftChassis.rotation(vex::rotationUnits::deg) > RightChassis.rotation(vex::rotationUnits::deg)){
            double diff = LeftChassis.rotation(vex::rotationUnits::deg) - RightChassis.rotation(vex::rotationUnits::deg);
            correction += (diff/2.0);
        }
        if(LeftChassis.rotation(vex::rotationUnits::deg) < RightChassis.rotation(vex::rotationUnits::deg)){
            double diff = RightChassis.rotation(vex::rotationUnits::deg) - LeftChassis.rotation(vex::rotationUnits::deg);
            correction += (diff/2.0);
        }
        
        RightChassis.spin(vex::directionType::rev, motorSpeed, vex::velocityUnits::rpm);
        LeftChassis.spin(vex::directionType::fwd, motorSpeed + correction,vex::velocityUnits::rpm); //this block of if statements makes the robot rotate back and forth after going 180 degrees to reach its target.
        
        oldError = error;
        
        
        if(oldSpeed >= 0.0 && motorSpeed < 0.0 && isFirst == true){
            isFirst = false;
            oldSpeed = motorSpeed;
            Brain.resetTimer();
            continue;
        }
        else if(oldSpeed < 0.0 && motorSpeed > 0.0 && isFirst == false){
            counter++;
        }
        else if(oldSpeed > 0.0 && motorSpeed < 0.0 && isFirst == false){
            counter++;
        }
        else{
            oldSpeed = motorSpeed;
            continue;
        }
           
        if(counter % 2 == 0 && counter > 1){
            double currentTime = (Brain.timer(vex::timeUnits::sec));
            int row = (i-1)*10;
            Brain.Screen.printAt(1,30 + row, true, "%f", currentTime); 
            Brain.resetTimer();
        }
        oldSpeed = motorSpeed;
        i++;
        
        vex::task::sleep(30);
    }
    LeftChassis.stop(vex::brakeType::brake);
    RightChassis.stop(vex::brakeType::brake);
}


int main() {
//pid code is not being executed here...?
}
